---
import GitHub from "./icons/GitHub.astro";
import NextJS from "./icons/NextJS.astro";
import Tailwind from "./icons/Tailwind.astro";
import Link from "./icons/Link.astro";
import LinkButton from "./LinkButton.astro";
import GooglePlayBadge from "./GooglePlayBadge.astro";
import Android from "./icons/Android.astro";
import Java from "./icons/Java.astro";
import Kotlin from "./icons/Kotlin.astro";
import Latex from "./icons/Latex.astro";
import { getLangFromUrl, useTranslations } from "@/i18n/utils";

type tLang = (str: any) => any;

const lang = getLangFromUrl(Astro.url);
const t: tLang = useTranslations(lang);

type TagType = {
  name: string;
  class: string;
  icon: (_props: Record<string, any>) => any;
};

type TagsType = {
  [key: string]: TagType;
};

const TAGS: TagsType = {
  NEXT: {
    name: "Next.js",
    class: "bg-black text-white",
    icon: NextJS,
  },
  TAILWIND: {
    name: "Tailwind CSS",
    class: "bg-[#003159] text-white",
    icon: Tailwind,
  },
  ANDROID: {
    name: "Android",
    class: "bg-[#32B675] text-white",
    icon: Android,
  },
  JAVA: {
    name: "Java",
    class: "bg-[#007396] text-white",
    icon: Java,
  },
  KOTLIN: {
    name: "Kotlin",
    class: "bg-[#0095D5] text-white",
    icon: Kotlin,
  },
  LATEX: {
    name: "LaTeX",
    class: "bg-[#008080] text-white",
    icon: Latex,
  },
  GITHUB: {
    name: "GitHub",
    class: "bg-[#333] text-white",
    icon: GitHub,
  },
};

interface ProjectType {
  image: string;
  imageAlt: string;
  title: string;
  description: string;
  tags: string[];
  link?: { kind: "web" | "googlePlay"; href: string };
  github?: string;
}

const PROJECTS: ProjectType[] = t("projects");
---

<div class="flex flex-col gap-y-16">
  {
    PROJECTS.map(({ image, title, description, tags, link, github }) => (
      <article class="flex flex-col space-x-0 space-y-8 group md:flex-row md:space-x-8 md:space-y-0">
        <div class="w-full md:w-1/2">
          <div class="relative col-span-6 row-span-5 transition duration-500 ease-in-out shadow-xl overflow-clip rounded-xl sm:rounded-xl md:group-hover:-translate-y-1 md:group-hover:shadow-2xl lg:border lg:border-gray-800 lg:hover:border-gray-700 lg:hover:bg-gray-800/50 aspect-[16/9]">
            <img
              alt={title}
              class="absolute inset-0 object-cover object-top w-full h-full transition duration-500 md:scale-110 md:group-hover:scale-105"
              loading="lazy"
              src={image}
            />
          </div>
        </div>

        <div class="w-full md:w-1/2 md:max-w-lg">
          <h3 class="text-2xl font-bold text-gray-800 dark:text-gray-100">
            {title}
          </h3>
          <div class="flex flex-wrap mt-2">
            <ul class="flex flex-row mb-2 gap-x-2">
              {tags.map((item) => {
                const tag: TagType = TAGS[item];

                if (tag) {
                  return (
                    <li>
                      <span
                        class={`flex gap-x-2 rounded-full text-xs ${tag.class} py-1 px-2 `}
                      >
                        <tag.icon class="size-4" />
                        {tag.name}
                      </span>
                    </li>
                  );
                }
              })}
            </ul>

            <div class="mt-2 text-gray-700 dark:text-gray-400">
              {description}
            </div>
            <footer class="flex items-end justify-start mt-4 gap-x-4">
              {github && (
                <LinkButton href={github}>
                  <GitHub class="size-6" />
                  {t("projects.code")}
                </LinkButton>
              )}
              {link && link.kind === "web" && (
                <LinkButton href={link.href}>
                  <Link class="size-4" />
                  Preview
                </LinkButton>
              )}
              {link && link.kind === "googlePlay" && (
                <GooglePlayBadge href={link.href} lang={lang} />
              )}
            </footer>
          </div>
        </div>
      </article>
    ))
  }
</div>
